[gd_resource type="ShaderMaterial" load_steps=11 format=3 uid="uid://cudkycx02ps38"]

[ext_resource type="Texture2D" uid="uid://bj45lfhomrpqr" path="res://blender_sources/materials/pool_tiles_albedo.png" id="1_o86sj"]
[ext_resource type="Texture2D" uid="uid://7xm0omqxmkdx" path="res://blender_sources/materials/pool_tiles_metal.exr" id="2_43n1l"]
[ext_resource type="Texture2D" uid="uid://bf3rh8mgycrjv" path="res://blender_sources/materials/pool_tiles_normal.png" id="3_yq56a"]

[sub_resource type="Shader" id="Shader_40r7k"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;

#include \"res://scenery/shaders/shader_textures/waterShaderLib.gdshaderinc\"
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float metallic;
uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
uniform sampler2D texture_heightmap : hint_default_black,filter_linear_mipmap,repeat_enable;
uniform float heightmap_scale;
uniform int heightmap_min_layers;
uniform int heightmap_max_layers;
uniform vec2 heightmap_flip;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D TopColorRange : source_color;
uniform vec3 AlbedoColor : source_color;
uniform vec3 DepthsColor : source_color;
uniform float LightPower;
uniform float LightStrength;
uniform float ShadowOpacity;
uniform float ShadowStrength;
uniform float fadeOffUpper = 2.0;
uniform float fadeOffBottomBeginning = 5.0;
uniform float fadeOffBottomEnd = 30.0;


varying vec3 fragment_worldpos;


void vertex() {
	vec3 normal = NORMAL;
	TANGENT = vec3(0.0,0.0,-1.0) * abs(normal.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(normal.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(normal.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(normal.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(normal.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(normal.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}




vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic;//metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness;//roughness_tex * roughness;
	SPECULAR = specular;//specular;
	NORMAL_MAP = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	fragment_worldpos = (INV_VIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
}

void light() {
	if (LIGHT_IS_DIRECTIONAL){

		float cast_shadow = ATTENUATION;
		
		vec3 origin = fragment_worldpos;
		
		vec2 vertexPosA = origin.xz + (vec2(0.5, 1.0) * TIME * waveTime);
		vec2 vertexPosB = origin.xz + (vec2(-0.2, 0.5) * TIME * waveTime);
		
		float heightvalue = GetHeight(vertexPosA, vertexPosB) + 0.1;
		
		if (origin.y > heightvalue){
			DIFFUSE_LIGHT  += clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * ATTENUATION * 0.5 * LIGHT_COLOR;
		}
		else{
			float angleUpward = clamp(2.0 - ((dot(LIGHT, vec3(0.0, 1.0, 0.0)) + 1.0)) * 180.0, 0.0, 180.0);
			DIFFUSE_LIGHT = vec3(1.0,0.0,0.0);
			
			//
			if (origin.y < worldHeight){
				float lengthToTravel = (worldHeight + 1.0) - origin.y / sin(90.0 - angleUpward);
				
				//origin += SunshineClouds_SunDirection * dither;
				origin += LIGHT * lengthToTravel;
			}
			else
			{
				origin += LIGHT * 1.0;
			}
			////origin.y = max(origin.y, SunshineClouds_CloudsFloor + 200.0);
			
			vertexPosA = origin.xz + (vec2(0.5, 1.0) * TIME * waveTime);
			vertexPosB = origin.xz + (vec2(-0.2, 0.5) * TIME * waveTime);
			vec4 generatedNormals = GenerateNormal(vertexPosA, vertexPosB);
			//float cloud_shadow = (1.0 - clamp(samplecloudmap(origin, TIME) * CloudDensity, 0.0, 1.0));
			float shadow = mix(ATTENUATION, smoothstep(worldHeight, worldHeight + waveHeight, generatedNormals.a), ShadowOpacity);
			//float topBlend = clamp(fragment_worldpos.y - (fragment_worldpos.y - fadeOffUpper) / heightvalue - (heightvalue - fadeOffUpper), 0.0, 1.0);
			float topBlend = smoothstep(heightvalue - fadeOffUpper, heightvalue, fragment_worldpos.y);
			float topBlendB = smoothstep(heightvalue - fadeOffUpper / 2.0, heightvalue, fragment_worldpos.y) * 0.2;
			float bottomBlend = smoothstep(heightvalue - fadeOffBottomEnd, heightvalue - fadeOffBottomBeginning, fragment_worldpos.y);
			shadow = shadow * bottomBlend;
			vec3 surfacecolor = texture(TopColorRange, vec2(0.0, 0.5)).rgb;
			vec3 shadowcolor = mix(pow(shadow, LightPower) * LightStrength * surfacecolor, mix(surfacecolor, ATTENUATION * LIGHT_COLOR, topBlendB), topBlend);
			float farBottomBlend = smoothstep(heightvalue - fadeOffBottomEnd * 2.0, heightvalue - fadeOffBottomBeginning * 2.0, fragment_worldpos.y);
			//DIFFUSE_LIGHT = mix(DepthsColor, DIFFUSE_LIGHT, farBottomBlend);
			//DIFFUSE_LIGHT += dot(LIGHT, NORMAL) * LIGHT_COLOR;
			DIFFUSE_LIGHT += clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * shadowcolor * ATTENUATION ;
			}
	}
	else{
		DIFFUSE_LIGHT += 0.3*clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * ATTENUATION * LIGHT_COLOR;
	}
}"

[sub_resource type="Gradient" id="Gradient_1sokk"]

[sub_resource type="GradientTexture1D" id="GradientTexture1D_ao5sd"]
gradient = SubResource("Gradient_1sokk")

[sub_resource type="Gradient" id="Gradient_nvn5r"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_opq05"]
gradient = SubResource("Gradient_nvn5r")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_jjflk"]
noise_type = 2
seed = 130
frequency = 0.0201
cellular_distance_function = 1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_qolo7"]
invert = true
seamless = true
noise = SubResource("FastNoiseLite_jjflk")

[resource]
render_priority = 0
shader = SubResource("Shader_40r7k")
shader_parameter/worldHeight = 2.01
shader_parameter/waveNoise = SubResource("NoiseTexture2D_qolo7")
shader_parameter/waveNoiseNormalMap = SubResource("NoiseTexture2D_qolo7")
shader_parameter/waveBlendSoftness = 0.1
shader_parameter/waveBlendPower = 0.5
shader_parameter/waveHeight = 7.24
shader_parameter/waveTime = 0.5
shader_parameter/specular = 0.5
shader_parameter/roughness = 0.3
shader_parameter/UVScale = 4.0
shader_parameter/subdiv_res = 1024.0
shader_parameter/NormalMapSampleRange = 10.0
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = ExtResource("1_o86sj")
shader_parameter/point_size = 4.92
shader_parameter/texture_metallic = ExtResource("2_43n1l")
shader_parameter/metallic_texture_channel = Vector4(0, 0, 0, 0)
shader_parameter/texture_roughness = SubResource("GradientTexture2D_opq05")
shader_parameter/metallic = 0.33
shader_parameter/texture_normal = ExtResource("3_yq56a")
shader_parameter/normal_scale = 0.280001
shader_parameter/texture_heightmap = ExtResource("1_o86sj")
shader_parameter/heightmap_scale = 5.0
shader_parameter/heightmap_min_layers = 8
shader_parameter/heightmap_max_layers = 32
shader_parameter/heightmap_flip = Vector2(1, 1)
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.75, 0.75, 0.75)
shader_parameter/uv1_offset = Vector3(-0.38, 0.13, 2.08165e-12)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/TopColorRange = SubResource("GradientTexture1D_ao5sd")
shader_parameter/AlbedoColor = Color(0.878431, 0.878431, 0.878431, 1)
shader_parameter/DepthsColor = Color(0.870588, 0.870588, 0.870588, 1)
shader_parameter/LightPower = -2.72
shader_parameter/LightStrength = 0.01
shader_parameter/ShadowOpacity = 0.8
shader_parameter/ShadowStrength = 0.45
shader_parameter/fadeOffUpper = 7.63
shader_parameter/fadeOffBottomBeginning = 5.0
shader_parameter/fadeOffBottomEnd = 10.0
